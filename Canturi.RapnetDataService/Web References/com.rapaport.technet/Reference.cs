//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Canturi.RapnetDataService.com.rapaport.technet {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RetailFeedSoap", Namespace="http://technet.rapaport.com/")]
    public partial class RetailFeed : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AuthenticationTicketHeader authenticationTicketHeaderValueField;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStonesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStonesSecureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleStoneSecureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleStoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiamondsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiamondsSecureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleDiamondOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleDiamondSecureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSampleResultsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RetailFeed() {
            this.Url = global::Canturi.RapnetDataService.Properties.Settings.Default.Canturi_RapnetDataService_com_rapaport_technet_RetailFeed;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AuthenticationTicketHeader AuthenticationTicketHeaderValue {
            get {
                return this.authenticationTicketHeaderValueField;
            }
            set {
                this.authenticationTicketHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetStonesCompletedEventHandler GetStonesCompleted;
        
        /// <remarks/>
        public event GetStonesSecureCompletedEventHandler GetStonesSecureCompleted;
        
        /// <remarks/>
        public event GetSingleStoneSecureCompletedEventHandler GetSingleStoneSecureCompleted;
        
        /// <remarks/>
        public event GetSingleStoneCompletedEventHandler GetSingleStoneCompleted;
        
        /// <remarks/>
        public event GetDiamondsCompletedEventHandler GetDiamondsCompleted;
        
        /// <remarks/>
        public event GetDiamondsSecureCompletedEventHandler GetDiamondsSecureCompleted;
        
        /// <remarks/>
        public event GetSingleDiamondCompletedEventHandler GetSingleDiamondCompleted;
        
        /// <remarks/>
        public event GetSingleDiamondSecureCompletedEventHandler GetSingleDiamondSecureCompleted;
        
        /// <remarks/>
        public event GetSampleResultsCompletedEventHandler GetSampleResultsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/Login", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Login(string Username, string Password) {
            this.Invoke("Login", new object[] {
                        Username,
                        Password});
        }
        
        /// <remarks/>
        public void LoginAsync(string Username, string Password) {
            this.LoginAsync(Username, Password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string Username, string Password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        Username,
                        Password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetStones", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetStones(int FeedID, Shapes Shape, double SizeFrom, double SizeTo, Colors ColorFrom, Colors ColorTo, Clarities ClarityFrom, Clarities ClarityTo, Cuts CutFrom, Cuts CutTo, double PriceFrom, double PriceTo, int Page, int PageSize, ref int DiamondsFound) {
            object[] results = this.Invoke("GetStones", new object[] {
                        FeedID,
                        Shape,
                        SizeFrom,
                        SizeTo,
                        ColorFrom,
                        ColorTo,
                        ClarityFrom,
                        ClarityTo,
                        CutFrom,
                        CutTo,
                        PriceFrom,
                        PriceTo,
                        Page,
                        PageSize,
                        DiamondsFound});
            DiamondsFound = ((int)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetStonesAsync(int FeedID, Shapes Shape, double SizeFrom, double SizeTo, Colors ColorFrom, Colors ColorTo, Clarities ClarityFrom, Clarities ClarityTo, Cuts CutFrom, Cuts CutTo, double PriceFrom, double PriceTo, int Page, int PageSize, int DiamondsFound) {
            this.GetStonesAsync(FeedID, Shape, SizeFrom, SizeTo, ColorFrom, ColorTo, ClarityFrom, ClarityTo, CutFrom, CutTo, PriceFrom, PriceTo, Page, PageSize, DiamondsFound, null);
        }
        
        /// <remarks/>
        public void GetStonesAsync(
                    int FeedID, 
                    Shapes Shape, 
                    double SizeFrom, 
                    double SizeTo, 
                    Colors ColorFrom, 
                    Colors ColorTo, 
                    Clarities ClarityFrom, 
                    Clarities ClarityTo, 
                    Cuts CutFrom, 
                    Cuts CutTo, 
                    double PriceFrom, 
                    double PriceTo, 
                    int Page, 
                    int PageSize, 
                    int DiamondsFound, 
                    object userState) {
            if ((this.GetStonesOperationCompleted == null)) {
                this.GetStonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStonesOperationCompleted);
            }
            this.InvokeAsync("GetStones", new object[] {
                        FeedID,
                        Shape,
                        SizeFrom,
                        SizeTo,
                        ColorFrom,
                        ColorTo,
                        ClarityFrom,
                        ClarityTo,
                        CutFrom,
                        CutTo,
                        PriceFrom,
                        PriceTo,
                        Page,
                        PageSize,
                        DiamondsFound}, this.GetStonesOperationCompleted, userState);
        }
        
        private void OnGetStonesOperationCompleted(object arg) {
            if ((this.GetStonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStonesCompleted(this, new GetStonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetStonesSecure", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetStonesSecure(
                    string Username, 
                    string Password, 
                    int FeedID, 
                    Shapes Shape, 
                    double SizeFrom, 
                    double SizeTo, 
                    Colors ColorFrom, 
                    Colors ColorTo, 
                    Clarities ClarityFrom, 
                    Clarities ClarityTo, 
                    Cuts CutFrom, 
                    Cuts CutTo, 
                    double PriceFrom, 
                    double PriceTo, 
                    int Page, 
                    int PageSize, 
                    ref int DiamondsFound) {
            object[] results = this.Invoke("GetStonesSecure", new object[] {
                        Username,
                        Password,
                        FeedID,
                        Shape,
                        SizeFrom,
                        SizeTo,
                        ColorFrom,
                        ColorTo,
                        ClarityFrom,
                        ClarityTo,
                        CutFrom,
                        CutTo,
                        PriceFrom,
                        PriceTo,
                        Page,
                        PageSize,
                        DiamondsFound});
            DiamondsFound = ((int)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetStonesSecureAsync(
                    string Username, 
                    string Password, 
                    int FeedID, 
                    Shapes Shape, 
                    double SizeFrom, 
                    double SizeTo, 
                    Colors ColorFrom, 
                    Colors ColorTo, 
                    Clarities ClarityFrom, 
                    Clarities ClarityTo, 
                    Cuts CutFrom, 
                    Cuts CutTo, 
                    double PriceFrom, 
                    double PriceTo, 
                    int Page, 
                    int PageSize, 
                    int DiamondsFound) {
            this.GetStonesSecureAsync(Username, Password, FeedID, Shape, SizeFrom, SizeTo, ColorFrom, ColorTo, ClarityFrom, ClarityTo, CutFrom, CutTo, PriceFrom, PriceTo, Page, PageSize, DiamondsFound, null);
        }
        
        /// <remarks/>
        public void GetStonesSecureAsync(
                    string Username, 
                    string Password, 
                    int FeedID, 
                    Shapes Shape, 
                    double SizeFrom, 
                    double SizeTo, 
                    Colors ColorFrom, 
                    Colors ColorTo, 
                    Clarities ClarityFrom, 
                    Clarities ClarityTo, 
                    Cuts CutFrom, 
                    Cuts CutTo, 
                    double PriceFrom, 
                    double PriceTo, 
                    int Page, 
                    int PageSize, 
                    int DiamondsFound, 
                    object userState) {
            if ((this.GetStonesSecureOperationCompleted == null)) {
                this.GetStonesSecureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStonesSecureOperationCompleted);
            }
            this.InvokeAsync("GetStonesSecure", new object[] {
                        Username,
                        Password,
                        FeedID,
                        Shape,
                        SizeFrom,
                        SizeTo,
                        ColorFrom,
                        ColorTo,
                        ClarityFrom,
                        ClarityTo,
                        CutFrom,
                        CutTo,
                        PriceFrom,
                        PriceTo,
                        Page,
                        PageSize,
                        DiamondsFound}, this.GetStonesSecureOperationCompleted, userState);
        }
        
        private void OnGetStonesSecureOperationCompleted(object arg) {
            if ((this.GetStonesSecureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStonesSecureCompleted(this, new GetStonesSecureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetSingleStoneSecure", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSingleStoneSecure(string Username, string Password, int FeedID, int DiamondID) {
            object[] results = this.Invoke("GetSingleStoneSecure", new object[] {
                        Username,
                        Password,
                        FeedID,
                        DiamondID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleStoneSecureAsync(string Username, string Password, int FeedID, int DiamondID) {
            this.GetSingleStoneSecureAsync(Username, Password, FeedID, DiamondID, null);
        }
        
        /// <remarks/>
        public void GetSingleStoneSecureAsync(string Username, string Password, int FeedID, int DiamondID, object userState) {
            if ((this.GetSingleStoneSecureOperationCompleted == null)) {
                this.GetSingleStoneSecureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleStoneSecureOperationCompleted);
            }
            this.InvokeAsync("GetSingleStoneSecure", new object[] {
                        Username,
                        Password,
                        FeedID,
                        DiamondID}, this.GetSingleStoneSecureOperationCompleted, userState);
        }
        
        private void OnGetSingleStoneSecureOperationCompleted(object arg) {
            if ((this.GetSingleStoneSecureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleStoneSecureCompleted(this, new GetSingleStoneSecureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetSingleStone", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSingleStone(int FeedID, int DiamondID) {
            object[] results = this.Invoke("GetSingleStone", new object[] {
                        FeedID,
                        DiamondID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleStoneAsync(int FeedID, int DiamondID) {
            this.GetSingleStoneAsync(FeedID, DiamondID, null);
        }
        
        /// <remarks/>
        public void GetSingleStoneAsync(int FeedID, int DiamondID, object userState) {
            if ((this.GetSingleStoneOperationCompleted == null)) {
                this.GetSingleStoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleStoneOperationCompleted);
            }
            this.InvokeAsync("GetSingleStone", new object[] {
                        FeedID,
                        DiamondID}, this.GetSingleStoneOperationCompleted, userState);
        }
        
        private void OnGetSingleStoneOperationCompleted(object arg) {
            if ((this.GetSingleStoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleStoneCompleted(this, new GetSingleStoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetDiamonds", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetDiamonds(Shapes Shape, double SizeFrom, double SizeTo, Colors ColorFrom, Colors ColorTo, Clarities ClarityFrom, Clarities ClarityTo, Cuts CutFrom, Cuts CutTo, double PriceFrom, double PriceTo, int Page, int PageSize, ref int DiamondsFound) {
            object[] results = this.Invoke("GetDiamonds", new object[] {
                        Shape,
                        SizeFrom,
                        SizeTo,
                        ColorFrom,
                        ColorTo,
                        ClarityFrom,
                        ClarityTo,
                        CutFrom,
                        CutTo,
                        PriceFrom,
                        PriceTo,
                        Page,
                        PageSize,
                        DiamondsFound});
            DiamondsFound = ((int)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiamondsAsync(Shapes Shape, double SizeFrom, double SizeTo, Colors ColorFrom, Colors ColorTo, Clarities ClarityFrom, Clarities ClarityTo, Cuts CutFrom, Cuts CutTo, double PriceFrom, double PriceTo, int Page, int PageSize, int DiamondsFound) {
            this.GetDiamondsAsync(Shape, SizeFrom, SizeTo, ColorFrom, ColorTo, ClarityFrom, ClarityTo, CutFrom, CutTo, PriceFrom, PriceTo, Page, PageSize, DiamondsFound, null);
        }
        
        /// <remarks/>
        public void GetDiamondsAsync(Shapes Shape, double SizeFrom, double SizeTo, Colors ColorFrom, Colors ColorTo, Clarities ClarityFrom, Clarities ClarityTo, Cuts CutFrom, Cuts CutTo, double PriceFrom, double PriceTo, int Page, int PageSize, int DiamondsFound, object userState) {
            if ((this.GetDiamondsOperationCompleted == null)) {
                this.GetDiamondsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiamondsOperationCompleted);
            }
            this.InvokeAsync("GetDiamonds", new object[] {
                        Shape,
                        SizeFrom,
                        SizeTo,
                        ColorFrom,
                        ColorTo,
                        ClarityFrom,
                        ClarityTo,
                        CutFrom,
                        CutTo,
                        PriceFrom,
                        PriceTo,
                        Page,
                        PageSize,
                        DiamondsFound}, this.GetDiamondsOperationCompleted, userState);
        }
        
        private void OnGetDiamondsOperationCompleted(object arg) {
            if ((this.GetDiamondsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiamondsCompleted(this, new GetDiamondsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetDiamondsSecure", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetDiamondsSecure(
                    string Username, 
                    string Password, 
                    Shapes Shape, 
                    double SizeFrom, 
                    double SizeTo, 
                    Colors ColorFrom, 
                    Colors ColorTo, 
                    Clarities ClarityFrom, 
                    Clarities ClarityTo, 
                    Cuts CutFrom, 
                    Cuts CutTo, 
                    double PriceFrom, 
                    double PriceTo, 
                    int Page, 
                    int PageSize, 
                    ref int DiamondsFound) {
            object[] results = this.Invoke("GetDiamondsSecure", new object[] {
                        Username,
                        Password,
                        Shape,
                        SizeFrom,
                        SizeTo,
                        ColorFrom,
                        ColorTo,
                        ClarityFrom,
                        ClarityTo,
                        CutFrom,
                        CutTo,
                        PriceFrom,
                        PriceTo,
                        Page,
                        PageSize,
                        DiamondsFound});
            DiamondsFound = ((int)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiamondsSecureAsync(
                    string Username, 
                    string Password, 
                    Shapes Shape, 
                    double SizeFrom, 
                    double SizeTo, 
                    Colors ColorFrom, 
                    Colors ColorTo, 
                    Clarities ClarityFrom, 
                    Clarities ClarityTo, 
                    Cuts CutFrom, 
                    Cuts CutTo, 
                    double PriceFrom, 
                    double PriceTo, 
                    int Page, 
                    int PageSize, 
                    int DiamondsFound) {
            this.GetDiamondsSecureAsync(Username, Password, Shape, SizeFrom, SizeTo, ColorFrom, ColorTo, ClarityFrom, ClarityTo, CutFrom, CutTo, PriceFrom, PriceTo, Page, PageSize, DiamondsFound, null);
        }
        
        /// <remarks/>
        public void GetDiamondsSecureAsync(
                    string Username, 
                    string Password, 
                    Shapes Shape, 
                    double SizeFrom, 
                    double SizeTo, 
                    Colors ColorFrom, 
                    Colors ColorTo, 
                    Clarities ClarityFrom, 
                    Clarities ClarityTo, 
                    Cuts CutFrom, 
                    Cuts CutTo, 
                    double PriceFrom, 
                    double PriceTo, 
                    int Page, 
                    int PageSize, 
                    int DiamondsFound, 
                    object userState) {
            if ((this.GetDiamondsSecureOperationCompleted == null)) {
                this.GetDiamondsSecureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiamondsSecureOperationCompleted);
            }
            this.InvokeAsync("GetDiamondsSecure", new object[] {
                        Username,
                        Password,
                        Shape,
                        SizeFrom,
                        SizeTo,
                        ColorFrom,
                        ColorTo,
                        ClarityFrom,
                        ClarityTo,
                        CutFrom,
                        CutTo,
                        PriceFrom,
                        PriceTo,
                        Page,
                        PageSize,
                        DiamondsFound}, this.GetDiamondsSecureOperationCompleted, userState);
        }
        
        private void OnGetDiamondsSecureOperationCompleted(object arg) {
            if ((this.GetDiamondsSecureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiamondsSecureCompleted(this, new GetDiamondsSecureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetSingleDiamond", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSingleDiamond(int DiamondID) {
            object[] results = this.Invoke("GetSingleDiamond", new object[] {
                        DiamondID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleDiamondAsync(int DiamondID) {
            this.GetSingleDiamondAsync(DiamondID, null);
        }
        
        /// <remarks/>
        public void GetSingleDiamondAsync(int DiamondID, object userState) {
            if ((this.GetSingleDiamondOperationCompleted == null)) {
                this.GetSingleDiamondOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleDiamondOperationCompleted);
            }
            this.InvokeAsync("GetSingleDiamond", new object[] {
                        DiamondID}, this.GetSingleDiamondOperationCompleted, userState);
        }
        
        private void OnGetSingleDiamondOperationCompleted(object arg) {
            if ((this.GetSingleDiamondCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleDiamondCompleted(this, new GetSingleDiamondCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetSingleDiamondSecure", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSingleDiamondSecure(string Username, string Password, int DiamondID) {
            object[] results = this.Invoke("GetSingleDiamondSecure", new object[] {
                        Username,
                        Password,
                        DiamondID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleDiamondSecureAsync(string Username, string Password, int DiamondID) {
            this.GetSingleDiamondSecureAsync(Username, Password, DiamondID, null);
        }
        
        /// <remarks/>
        public void GetSingleDiamondSecureAsync(string Username, string Password, int DiamondID, object userState) {
            if ((this.GetSingleDiamondSecureOperationCompleted == null)) {
                this.GetSingleDiamondSecureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleDiamondSecureOperationCompleted);
            }
            this.InvokeAsync("GetSingleDiamondSecure", new object[] {
                        Username,
                        Password,
                        DiamondID}, this.GetSingleDiamondSecureOperationCompleted, userState);
        }
        
        private void OnGetSingleDiamondSecureOperationCompleted(object arg) {
            if ((this.GetSingleDiamondSecureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleDiamondSecureCompleted(this, new GetSingleDiamondSecureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetSampleResults", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSampleResults() {
            object[] results = this.Invoke("GetSampleResults", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSampleResultsAsync() {
            this.GetSampleResultsAsync(null);
        }
        
        /// <remarks/>
        public void GetSampleResultsAsync(object userState) {
            if ((this.GetSampleResultsOperationCompleted == null)) {
                this.GetSampleResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSampleResultsOperationCompleted);
            }
            this.InvokeAsync("GetSampleResults", new object[0], this.GetSampleResultsOperationCompleted, userState);
        }
        
        private void OnGetSampleResultsOperationCompleted(object arg) {
            if ((this.GetSampleResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSampleResultsCompleted(this, new GetSampleResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://technet.rapaport.com/", IsNullable=false)]
    public partial class AuthenticationTicketHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string ticketField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string Ticket {
            get {
                return this.ticketField;
            }
            set {
                this.ticketField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Shapes {
        
        /// <remarks/>
        ROUND,
        
        /// <remarks/>
        PEAR,
        
        /// <remarks/>
        PRINCESS,
        
        /// <remarks/>
        MARQUISE,
        
        /// <remarks/>
        OVAL,
        
        /// <remarks/>
        RADIANT,
        
        /// <remarks/>
        EMERALD,
        
        /// <remarks/>
        HEART,
        
        /// <remarks/>
        CUSHION,
        
        /// <remarks/>
        ASSCHER,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Colors {
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        G,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        I,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        M,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Clarities {
        
        /// <remarks/>
        IF,
        
        /// <remarks/>
        VVS1,
        
        /// <remarks/>
        VVS2,
        
        /// <remarks/>
        VS1,
        
        /// <remarks/>
        VS2,
        
        /// <remarks/>
        SI1,
        
        /// <remarks/>
        SI2,
        
        /// <remarks/>
        SI3,
        
        /// <remarks/>
        I1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Cuts {
        
        /// <remarks/>
        EXCELLENT,
        
        /// <remarks/>
        VERY_GOOD,
        
        /// <remarks/>
        GOOD,
        
        /// <remarks/>
        FAIR,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStonesCompletedEventHandler(object sender, GetStonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int DiamondsFound {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStonesSecureCompletedEventHandler(object sender, GetStonesSecureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStonesSecureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStonesSecureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int DiamondsFound {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSingleStoneSecureCompletedEventHandler(object sender, GetSingleStoneSecureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleStoneSecureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleStoneSecureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSingleStoneCompletedEventHandler(object sender, GetSingleStoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleStoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleStoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDiamondsCompletedEventHandler(object sender, GetDiamondsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiamondsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiamondsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int DiamondsFound {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDiamondsSecureCompletedEventHandler(object sender, GetDiamondsSecureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiamondsSecureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiamondsSecureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int DiamondsFound {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSingleDiamondCompletedEventHandler(object sender, GetSingleDiamondCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleDiamondCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleDiamondCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSingleDiamondSecureCompletedEventHandler(object sender, GetSingleDiamondSecureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleDiamondSecureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleDiamondSecureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSampleResultsCompletedEventHandler(object sender, GetSampleResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSampleResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSampleResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591