@model Canturi.Models.BusinessEntity.Admin.DiamondModels
@using Canturi.Models.BusinessHelper.CommonHelper
@{
    ViewBag.Title = "Add Diamond";
    Layout = "~/Areas/SecureAdmin/Views/Shared/_Layout.cshtml";
}


<style type="text/css">
    .style1 {
        height: 30px;
    }

    .style2 {
        height: 39px;
    }

    .style3 {
        height: 127px;
    }
</style>
<section class="content-header">
    <h1>
        Manage Diamond
        <small>Control panel</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="@Url.Content("~/SecureAdmin/DashBoard")"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Manage Diamond</li>
    </ol>
</section>
<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">
                    Add Diamond
                </h3>
            </div>
            <div class="top-buttons-container">
                <a href="@Url.Content("~/SecureAdmin/Diamond/")" class="btn btn-success">View</a>
                <a href="@Url.Content("~/SecureAdmin/Diamond/Add")" class="btn btn-info">Add</a>
            </div>
            @using (Html.BeginForm("Add", "Diamond", FormMethod.Post, new { enctype = "multipart/form-data", @id = "frmAddDiamond" }))
            {

                @Html.HiddenFor(m => m.DiamondId)
                <div class="box-body" style="width: 50%;">
                    <div class="form-group" style="display:none;">
                        @Html.LabelFor(m => m.DiamondImage)
                        <input type="file" id="fuDiamondImage" name="fuDiamondImage" />
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.LotNumber)
                        @Html.TextBoxFor(m => m.LotNumber, new { @class = "form-control", @placeholder = "Enter lot# number" })

                        @Html.ValidationMessageFor(m => m.LotNumber)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Shape)
                        <span class="asterisk">*</span>
                        @Html.DropDownListFor(x => x.Shape, new SelectList(CommonData.ShapeList(), "Value", "Text"), "Select shape", new { @class = "form-control", @id = "ddlShape", @name = "ddlShape" })
                        @Html.ValidationMessageFor(m => m.Shape)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Color)
                        <span class="asterisk">*</span>
                        @Html.DropDownListFor(x => x.Color, new SelectList(CommonData.ColorTypeList(), "Value", "Text"), "Select color", new { @class = "form-control", @id = "ddlColor", @name = "ddlColor" })
                        @Html.ValidationMessageFor(m => m.Color)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Clartiy)
                        <span class="asterisk">*</span>
                        @Html.DropDownListFor(x => x.Clartiy, new SelectList(CommonData.ClarityTypeList(), "Value", "Text"), "Select clartiy", new { @class = "form-control", @id = "ddlClartiy", @name = "ddlClartiy" })
                        @Html.ValidationMessageFor(m => m.Clartiy)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Cut)
                        <span class="asterisk">*</span>
                        @Html.DropDownListFor(x => x.Cut, new SelectList(CommonData.CutTypeList(), "Value", "Text"), "Select cut", new { @class = "form-control", @id = "ddlCut", @name = "ddlCut" })
                        @Html.ValidationMessageFor(m => m.Cut)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Polish)
                        <span class="asterisk">*</span>
                        @Html.DropDownListFor(x => x.Polish, new SelectList(CommonData.PolishTypeList(), "Value", "Text"), "Select polish", new { @class = "form-control", @id = "ddlPolish", @name = "ddlPolish" })
                        @Html.ValidationMessageFor(m => m.Polish)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Symmetry)
                        <span class="asterisk">*</span>
                        @Html.DropDownListFor(x => x.Symmetry, new SelectList(CommonData.SymmetryTypeList(), "Value", "Text"), "Select Symmetry", new { @class = "form-control", @id = "ddlSymmetry", @name = "ddlSymmetry" })
                        @Html.ValidationMessageFor(m => m.Symmetry)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Flourescence)
                        <span class="asterisk">*</span>
                        @Html.DropDownListFor(x => x.Flourescence, new SelectList(CommonData.FlourescenceTypeList(), "Value", "Text"), "Select Flourescence", new { @class = "form-control", @id = "ddlFlourescence", @name = "ddlFlourescence" })
                        @Html.ValidationMessageFor(m => m.Flourescence)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Depth)
                        <span class="asterisk">*</span>
                        @Html.TextBoxFor(m => m.Depth, new { @class = "form-control", @placeholder = "Enter depth" })
                        @Html.ValidationMessageFor(m => m.Depth)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Table)
                        <span class="asterisk">*</span>
                        @Html.TextBoxFor(m => m.Table, new { @class = "form-control", @placeholder = "Enter table" })
                        @Html.ValidationMessageFor(m => m.Table)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Measurements)
                        <span class="asterisk">*</span>
                        @Html.TextBoxFor(m => m.Measurements, new { @class = "form-control", @placeholder = "Enter measurements" })
                        @Html.ValidationMessageFor(m => m.Measurements)
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(m => m.Ratio)
                        <span class="asterisk">*</span>
                        @Html.TextBoxFor(m => m.Ratio, new { @class = "form-control", @placeholder = "Enter ratio" })
                        @Html.ValidationMessageFor(m => m.Ratio)
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(m => m.Lab)
                        <span class="asterisk">*</span>
                        @Html.DropDownListFor(x => x.Lab, new SelectList(CommonData.LabTypeList(), "Value", "Text"), "Select Lab", new { @class = "form-control", @id = "ddlLab", @name = "ddlLab" })




                        @Html.ValidationMessageFor(m => m.Lab)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Supplier)
                        @Html.TextBoxFor(m => m.Supplier, new { @class = "form-control", @placeholder = "Enter Supplier" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Carat)
                        <span class="asterisk">*</span>
                        @Html.TextBoxFor(m => m.Carat, new { @class = "form-control", @placeholder = "Enter carat", @onchange = "FnCalculateTotalPrice()", onkeypress = "FnCalculateTotalPrice()", @onkeyup = "FnCalculateTotalPrice()", maxlength = "5" })
                        @Html.ValidationMessageFor(m => m.Carat)
                    </div>
                    <div class="form-group">
                        @Html.Label("Price per carat")
                        <span class="asterisk">*</span>
                        @Html.TextBoxFor(m => m.Price, new { @class = "form-control", @placeholder = "Enter price", @onchange = "FnCalculateTotalPrice()", onkeypress = "FnCalculateTotalPrice()", @onkeyup = "FnCalculateTotalPrice()", maxlength = "5" })
                        @Html.ValidationMessageFor(m => m.Price)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.EyeClean)<br />
                        @Html.CheckBoxFor(m => m.IsClean)
                    </div>
                    <div class="form-group" id="divTotalPrice">

                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.DiamondCertificate)
                        <input type="file" id="fuDiamondCertificate" name="fuDiamondCertificate" />
                    </div>
                    <div class="form-group">
                        @*@Html.LabelFor(m => m.UploadVideo)*@
                        @Html.Label("Upload Video")
                        <span class="asterisk"> (Maximum size 10 MB)</span>
                        <input type="file" id="fuDiamondVideo" name="fuDiamondVideo" accept="video/mp4,video/x-m4v,video/*" data-max-size-in-MB="10" />
                        @*<input type="text" onclick="maxFileSizeCheck()" />*@
                    </div>
                    <div class="form-group">
                        @Html.CheckBoxFor(m => m.IsCurrencyLock, new { @disabled = "disabled" })
                        @Html.LabelFor(m => m.IsCurrencyLock)
                    </div>
                    <div class="form-group" id="divInAud">
                        @Html.Label("In Aud")
                        <span class="asterisk">*</span>
                        @Html.TextBoxFor(m => m.AudValue, new { @class = "form-control", @placeholder = "Enter aud" })
                        @Html.ValidationMessageFor(m => m.AudValue)
                    </div>
                    <div class="form-group">

                        @Html.CheckBoxFor(m => m.IsMarkupLock, new { @disabled = "disabled" })
                        @Html.LabelFor(m => m.IsMarkupLock)
                    </div>
                </div>
                <div class="box-body" id="divMarkup">
                    <div class="form-group">
                        <div class="box-body table-responsive" style=" background: #f2f2f2; border: #f4f4f4 1px solid;padding: 14px 2px 27px 33px;">
                            <table class="markup-form">
                                <tr>
                                    <td colspan="6" style="color:red; font-weight:normal">
                                        @Html.HiddenFor(m => m.Markup.MarkUpId)
                                    </td>
                                </tr>
                                <tr class="heading">
                                    <td colspan="2" style="width:250px">Price Range</td>
                                    <td colspan="2" style="width:280px">Mark up (%)</td>
                                    <td style="width:115px">Tax (%)</td>
                                </tr>
                                <tr>
                                    <td><span>$</span>@Html.TextBoxFor(m => m.Markup.PriceFrom)</td>
                                    <td><span>-$</span>@Html.TextBoxFor(m => m.Markup.PriceTo)</td>
                                    <td>@Html.TextBoxFor(m => m.Markup.MarkUpPercentage)<span>%</span></td>
                                    <td><span>+</span><span>$</span>@Html.TextBoxFor(m => m.Markup.MarkUpAmount)</td>
                                    <td>@Html.TextBoxFor(m => m.Markup.MarkUpTax)</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="box-body" style="width: 50%;">
                    <div class="form-group">
                        @Html.Label("Final Price In Aud:")
                        <input type="text" readonly="readonly" id="txtFinalInAud" value="0" class="form-control" />

                    </div>
                   
                </div>
                <div class="box-footer">
                    <button type="submit" class="btn btn-primary">
                        Submit
                    </button>
                    <a href="@Url.Content("~/SecureAdmin/Diamond")" class="btn btn-default">Cancel</a>
                </div>





            }
        </div>
    </div>
</section>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js" type="text/javascript"></script>
<script src="@Url.Content("~/Areas/SecureAdmin/Content/bootstrap/js/bootstrap.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Areas/SecureAdmin/Content/dist/js/app.js")" type="text/javascript"></script>

@section scripts{
    <script src="@Url.Content("~/Areas/SecureAdmin/Content/plugins/jQuery/jQuery-2.1.4.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
}
<script type="text/javascript">
    function FnCalculateTotalPrice() {
        var Carat = $("#Carat").val();
        var Price = $("#Price").val();
        $("#divTotalPrice").html('');
        if (Carat != '') {
            if (Price != '') {
                $("#divTotalPrice").html("<label>Total Price (Carat * Price per carat): " + parseFloat(Carat) * parseFloat(Price) + "</label>");
            }
        }
    }


    var markupJson = '@Html.Raw(Json.Encode(Model.OtherMarkupList))';

    function CalculateFinalPrice() {
        //alert("0");
        var Carat = $("#Carat").val();
        var Price = $("#Price").val();

        var diamondAmount = parseFloat(Carat) * parseFloat(Price);

        var Markup_PriceFrom = parseFloat($("#Markup_PriceFrom").val());
        var Markup_PriceTo = parseFloat($("#Markup_PriceTo").val());

        var MarkUpPercentage = parseFloat($("#Markup_MarkUpPercentage").val());;
        var MarkUpAmount = parseFloat($("#Markup_MarkUpAmount").val());;
        var MarkUpTax = parseFloat($("#Markup_MarkUpTax").val());;
        var Aud = parseFloat($("#AudValue").val());


        if (Markup_PriceFrom <= diamondAmount && Markup_PriceTo >= diamondAmount) {

        }
        else {
            for (var i = 0; i < markupJson.length; i++) {
                if (markupJson[i].PriceFrom <= diamondAmount && markupJson[i].PriceTo >= diamondAmount) {

                    MarkUpPercentage = markupJson[i].MarkUpPercentage;
                    MarkUpAmount = markupJson[i].MarkUpAmount;
                    MarkUpTax = markupJson[i].MarkUpTax;
                }
            }
        }
        //alert(diamondAmount);
        var audFinalAmount = (diamondAmount + ((diamondAmount * MarkUpPercentage) / 100) + MarkUpAmount);
        audFinalAmount = (audFinalAmount + ((audFinalAmount * MarkUpTax) / 100)) / Aud;
        //alert(audFinalAmount);
        //var dollarFinal = diamondAmount + ((diamondAmount * MarkUpPercentage) / 100) + MarkUpAmount;

        try {
            var txtFinalInAud = Math.floor((audFinalAmount + 99) / 100) * 100;
            if (isNaN(txtFinalInAud)) {
                txtFinalInAud = 0;
            }
            $("#txtFinalInAud").val(txtFinalInAud);

        }
        catch (err) {
            $("#txtFinalInAud").val("0");
        }



    }
    $(document).ready(function () {
        $("#Carat,#Price,#AudValue,#Markup_PriceFrom,#Markup_PriceTo,#Markup_MarkUpPercentage,#Markup_MarkUpTax,#Markup_MarkUpAmount,#Markup_MarkUpTax").keyup(function () {
            CalculateFinalPrice();
        });
        $('input').on('ifClicked', function (event) {
            var isChecked = event.delegateTarget.checked;
            if (isChecked) {
                isChecked = false;
            }
            else {
                isChecked = true;
            }
        });
        //$("#IsMarkupLock").change(function () {
        //    if ($(this).prop('checked') == true) {
        //        $("#divMarkup").show();
        //    }
        //    else {
        //        $("#divMarkup").hide();
        //    }
        //});

        //$("#IsCurrencyLock").change(function () {
        //    if ($(this).prop('checked') == true) {
        //        $("#divInAud").show();
        //    }
        //    else {
        //        $("#divInAud").hide();
        //    }
        //});

    });
     
    $(function () {
        $('form').submit(function () {  // frmAddDiamond
            var isOk = maxFileSizeCheck();
            
            return isOk;
        });
    });

    function maxFileSizeCheck() {
        //debugger;
        var isOk = true;
        $('input[type=file][data-max-size-in-MB]').each(function () {
        //    console.log(this.files[0]);            
            if (typeof this.files[0] !== 'undefined') {
                var maxSizeinMB = parseInt($(this).attr('data-max-size-in-MB'), 10)
                var maxSize = maxSizeinMB * 1024 * 1024,  // To convert to Bytes
                    size = this.files[0].size;
                isOk = maxSize >= size;
                /*console.log("maxSize: "+ maxSize);
                console.log("Size: " + size);
                console.log(isOk);*/
                var filePath = this.files[0].name;

                // Allowing file type
                var allowedExtensions =
                    /(\.mp4|\.mov|\.ogg|\.webm)$/i;

                if (!allowedExtensions.exec(filePath)) {
                    sweetAlert("Please upload .mp4 , .mov , .ogg , .webm files only", "", "warning");
                    //alert("Please upload .mp4 , .mov , .ogg , .webm files only.");
                    $(this).css('border', '1px solid red');
                    isOk = false;
                }
                else if (!isOk) {
                    sweetAlert("The file size exceeds maximum limit of " + maxSizeinMB + " MB", "", "warning");
                    //alert('The file size exceeds maximum limit of ' + maxSizeinMB + ' MB');
                    $(this).css('border', '1px solid red');
                }
                else {
                    $(this).css('border', 'none');
                }
                return isOk;
            }
        });
        console.log(isOk);
        return isOk;
    }
</script>
